importc "string.h"

importc "generation/prelude.h"
importc "helpers/system.h"
importc "lex/prelude.h"
importc "macros/helpers.h"


type DaybreakArgs struct is
	source_file_path: ccstring
	output_file_path: ccstring
end

type DaybreakArgParseResult struct is
	is_success: bool
	args: DaybreakArgs
end

type DaybreakTokenifyResult struct is
	error: int
	tokens: ptr<Token>
end

type DaybreakEmissionResult struct is
	error: int
end

fun daybreak_compile (args: DaybreakArgs) int do
	mut tokenify_result: DaybreakTokenifyResult <- (_daybreak_tokenify_file args)
	match
		(not tokenify_result.error) => do
			mut program: ptr<ProgramNode> <- (ast_parse_program (point tokenify_result.tokens))
			match
				(truthy program) => do
					let emit_result: DaybreakEmissionResult <- (_daybreak_emit_program args program)
					match
						(not emit_result.error) => 0
						(default) => emit_result.error
					end
				end
				(default) => do
					(LOG_ERROR "Failed to parse program")
					2
				end
			end
		end
		(default) => tokenify_result.error
	end
end

fun _daybreak_compile_program (output_c_file_path: cstring args: DaybreakArgs) int do
	match
		(truthy args.output_file_path) => do
			let output_file_path: cstring <- args.output_file_path
			(LOG_INFO "Output file: %s" output_file_path)
			(compile_c_code output_c_file_path output_file_path)
		end
		(default) => do
			mut output_file_path: cstring <- (get_default_output_file)
			(LOG_INFO "Output file: %s" output_file_path)
			let result: int <- (compile_c_code output_c_file_path output_file_path)
			(delete output_file_path)
			result
		end
	end
end

fun _daybreak_emit_program (args: DaybreakArgs program: ptr<ProgramNode>) DaybreakEmissionResult do
	let standard_library_directory: cstring <- (get_standard_library_directory)
	let output_c_file_length: size_t <- (add
		1
		(add
			(strlen standard_library_directory)
			(add
				(strlen OUTPUT_DIRECTORY)
				(strlen DEFAULT_SOURCE_OUTPUT))))
	mut output_c_file_path: cstring <- (malloc
		(mul
			(sizeof char)
			output_c_file_length))
	(sprintf
		output_c_file_path
		(interpolate_cstring "%s" (interpolate_cstring OUTPUT_DIRECTORY DEFAULT_SOURCE_OUTPUT))
		standard_library_directory)

	let generation_error: int <- (generate_c_code program output_c_file_path)
	(ast_free_program_node program)
	match
		(not generation_error) => do
			let compiler_error: int <- (_daybreak_compile_program output_c_file_path args)
			(delete output_c_file_path)
			{DaybreakEmissionResult
				error <- compiler_error
			}
		end
		(default) => do
			(LOG_ERROR "Failed to generate C code. Received error: %d" generation_error)
			{DaybreakEmissionResult
				error <- generation_error
			}
		end
	end
end

fun daybreak_greeting () bool do
	(printf
		"%s#####################################%s\n"
		ANSI_FOREGROUND_YELLOW
		ANSI_RESET)
	(printf
		"%s# Welcome to the Daybreak compiler! #%s\n"
		ANSI_FOREGROUND_YELLOW
		ANSI_RESET)
	(printf
		"%s#####################################%s\n"
		ANSI_FOREGROUND_YELLOW
		ANSI_RESET)
	true
end

fun daybreak_parse_args (argc: int argv: ptr<ccstring>) DaybreakArgParseResult do
	match
		(lt argc 2) => {DaybreakArgParseResult
			is_success <- false
		}
	end

	let result: DaybreakArgParseResult <- (_daybreak_parse_arg
		(add argv 1)
		(sub argc 1)
		{DaybreakArgs
			source_file_path <- NULL
			output_file_path <- NULL
		}
	)
	match
		(falsey result.args.output_file_path) => {DaybreakArgParseResult
			is_success <- result.is_success
			args <- {DaybreakArgs
				source_file_path <- result.args.source_file_path
				output_file_path <- result.args.output_file_path
			}
		}
		(default) => result
	end
end

fun _daybreak_parse_arg (argv: ptr<ccstring> argc: int acc: DaybreakArgs) DaybreakArgParseResult do
	match
		(lte argc 0) => {DaybreakArgParseResult
			is_success <- true
			args <- acc
		}
		(default) => match
			(eq
				0
				(strcmp (deref argv) "-o")) => match
					(lt argc 2) => {DaybreakArgParseResult
						is_success <- false
						args <- acc
					}
					(default) => (_daybreak_parse_arg
						(add argv 2)
						(sub argc 2)
						{DaybreakArgs
							source_file_path <- acc.source_file_path
							output_file_path <- (unsafe_index argv 1)
						}
					)
				end
			(default) => (_daybreak_parse_arg
				(add argv 1)
				(sub argc 1)
				{DaybreakArgs
					source_file_path <- (deref argv)
					output_file_path <- acc.output_file_path
				}
			)
		end
	end
end

fun _daybreak_tokenify_file (args: DaybreakArgs) DaybreakTokenifyResult do
	let directory_setup_error: int <- (setup_language_directories)
	match
		(truthy directory_setup_error) => {DaybreakTokenifyResult
			error <- directory_setup_error
			tokens <- NULL
		}
	end
	mut source_file: ptr<FILE> <- (lex_open_file
		args.source_file_path
		DAYBREAK_NEXT_IMPORT_POINTER)
	match
		(falsey source_file) => {DaybreakTokenifyResult
			error <- 1
			tokens <- NULL
		}
	end
	mut tokens: ptr<Token> <- (lex_file
		args.source_file_path
		source_file
	)
	(fclose source_file)
	{DaybreakTokenifyResult
		error <- 0
		tokens <- tokens
	}
end
