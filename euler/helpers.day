importc "inttypes.h"
importc "math.h"


fun check_solution (solution: int64_t correct_answer: int64_t) bool do
	let padding: int <- 20
	(printf
		(interpolate_cstring
			"Found Solution: %*"
			(interpolate_cstring
				PRId64
				(interpolate_cstring
					"\nCorrect Answer: %*"
					(interpolate_cstring
						PRId64
						"\n\n"))))
		padding
		solution
		padding
		correct_answer)
	(eq solution correct_answer)
end

fun is_prime (num: int64_t) bool do
	(_is_prime num 2)
end

fun not_implemented () int do
	(exit 1)
	1
end

fun partial_sum (n: int scale: int) int do
	let limit: int <- (div (sub n 1) scale)
	(div
		(mul scale
			(mul limit
				(add limit 1)
				)
			)
			2)
end

fun welcome (problem_number: int) int do
	(printf "Solving Euler problem #%03d\n" problem_number)
	problem_number
end

fun _is_prime (num: int64_t factor: int64_t) bool do
	let square_root: int64_t <- (sqrt num)
	match
		(gt factor square_root) => true
		(eq
			0
			(mod num factor)) => false
		(default) => (_is_prime
			num
			(add factor 1))
	end
end
