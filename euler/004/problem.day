importc "string.h"
import "euler/helpers.day"


fun find_palindromic_pair (upper_bound: int) int do
	(_find_palindromic_pair upper_bound upper_bound 0)
end

fun is_palindrome (str: cstring len: size_t) bool do
	(_is_palindrome str len 0)
end

fun is_palindromic_number (number: int) bool do
	let len: size_t <- 20
	let buffer: cstring <- (malloc (mul len (sizeof char)))
	(sprintf
		(cast
			cstring
			buffer)
		"%d"
		number)
	let result: bool <- (is_palindrome buffer (strlen buffer))
	(delete buffer)
	result
end

fun problem004 () int do
	(welcome 4)
	let solution: int <- (_problem004 3)
	(assert (check_solution solution 906609))
	0
end

fun _find_palindromic_pair (upper_bound: int test_number: int current_max_palindrome: int) int do
	let product: int <- (mul upper_bound test_number)
	match
		(and
			(is_palindromic_number product)
			(gt product current_max_palindrome)) => (_find_palindromic_pair
				upper_bound
				(sub test_number 1)
				product)
		(lte
			upper_bound
			1) => current_max_palindrome
		(lte
			test_number
			1) => (_find_palindromic_pair
				(sub upper_bound 1)
				(sub upper_bound 1)
				current_max_palindrome)
		(default) => (_find_palindromic_pair
			upper_bound
			(sub test_number 1)
			current_max_palindrome)
	end
end

fun _is_palindrome (str: cstring len: size_t left_index: size_t) bool do
	let right_index: size_t <- (sub
		len
		(add
			left_index
			1))
	match
		(gte
			left_index
			right_index) => true
		(not
			(eq
				(unsafe_index str left_index)
				(unsafe_index str right_index))) => false
		(default) => (_is_palindrome str len (add left_index 1))
	end
end

fun _problem004 (digits: int) int do
	(find_palindromic_pair
		(sub
			(cast
				int
				(pow
					10
					digits))
			1))
end
