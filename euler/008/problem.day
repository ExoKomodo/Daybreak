import "euler/helpers.day"


fun find_largest_contiguous_product (series: ccstring digits: size_t) int64_t is
	return (_find_largest_contiguous_product
		series
		digits
		0)
end

fun multiply_range_from_cstring (str: ccstring len: size_t) int64_t is
	return (_multiply_range_from_cstring str len 1)
end

fun problem008 () int is
	(welcome 8)
	let solution: int64_t <- (_problem008 13)
	(check_solution solution 23514624000)
	return 0
end

fun _find_largest_contiguous_product (series: ccstring digits: size_t largest: int64_t) int64_t is
	match
		(lt
			(strlen series)
			digits) => return largest
	end
	
	let product: int64_t <- (multiply_range_from_cstring series digits)
	match
		(gt product largest) => return (_find_largest_contiguous_product (add series 1) digits product)
		(default) => return (_find_largest_contiguous_product (add series 1) digits largest)
	end
end

fun _multiply_range_from_cstring (str: ccstring len: size_t acc: int64_t) int64_t is
	match
		(or
			(lt
				(strlen str)
				len)
		  (eq len 0)) => return acc
		(default) => return (_multiply_range_from_cstring
			(add str 1)
			(sub len 1)
			(mul
				acc
				(sub 
					(unsafe_index str 0)
					48)) ? TODO: Add character literal support. This represents the letter '0'
		)
	end
end

fun _problem008 (digits: size_t) int64_t is
  let series: cstring <- 
		(interpolate_cstring "73167176531330624919225119674426574742355349194934"
		(interpolate_cstring "96983520312774506326239578318016984801869478851843"
		(interpolate_cstring "85861560789112949495459501737958331952853208805511"
		(interpolate_cstring "12540698747158523863050715693290963295227443043557"
		(interpolate_cstring "66896648950445244523161731856403098711121722383113"
		(interpolate_cstring "62229893423380308135336276614282806444486645238749"
		(interpolate_cstring "30358907296290491560440772390713810515859307960866"
		(interpolate_cstring "70172427121883998797908792274921901699720888093776"
		(interpolate_cstring "65727333001053367881220235421809751254540594752243"
		(interpolate_cstring "52584907711670556013604839586446706324415722155397"
		(interpolate_cstring "53697817977846174064955149290862569321978468622482"
		(interpolate_cstring "83972241375657056057490261407972968652414535100474"
		(interpolate_cstring "82166370484403199890008895243450658541227588666881"
		(interpolate_cstring "16427171479924442928230863465674813919123162824586"
		(interpolate_cstring "17866458359124566529476545682848912883142607690042"
		(interpolate_cstring "24219022671055626321111109370544217506941658960408"
		(interpolate_cstring "07198403850962455444362981230987879927244284909188"
		(interpolate_cstring "84580156166097919133875499200524063689912560717606"
		(interpolate_cstring "05886116467109405077541002256983155200055935729725"
												 "71636269561882670428252483600823257530420752963450"
		)))))))))))))))))))
	return (find_largest_contiguous_product series digits)
end
