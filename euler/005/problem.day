import "euler/helpers.day"


fun construct_polynomial_term (upper_bound: int prime: int) int do
	(pow
		prime
		(get_prime_factor_polynomial_degree upper_bound prime))
end

fun get_prime_factor_polynomial_degree (upper_bound: int prime: int) int do
	(cast
		int
		(floor
			(div
				(log upper_bound)
				(log prime))))
end

fun problem005 () int do
	(welcome 5)
	let solution: int <- (_problem005)
	(assert (check_solution solution 232792560))
	0
end

fun recursive_multiply (upper_bound: int arr: array<int> len: size_t) int do
	(_recursive_multiply upper_bound arr len 0 1)
end

fun _recursive_multiply (upper_bound: int arr: array<int> len: size_t index: size_t acc: int) int do
	match
		(gte
			index
			len) => acc
		(default) => (_recursive_multiply
			upper_bound
			arr
			len
			(add index 1)
			(mul
				acc
				(construct_polynomial_term
					upper_bound
					(unsafe_index arr index))))
	end
end

fun _problem005 () int do
	mut primes: array<int> <- [
		2
		3
		5
		7
		11
		13
		17
		19]
	
	(recursive_multiply
		20
		primes
		(div
			(sizeof primes)
			(sizeof int)))
end
